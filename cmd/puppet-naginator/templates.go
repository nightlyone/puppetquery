package main

import (
	"bytes"
	"fmt"
	"sort"
	"strings"
	"time"

	"github.com/nightlyone/puppetquery"
)

const nagiosPrefix = "Nagios_"

var keyOrder = slice2map([]string{"host_name", "alias", "use", "parents", "service_description"})
var badparams = slice2map([]string{"notify", "target", "ensure", "require", "before", "tag"})

func slice2map(s []string) map[string]int {
	m := make(map[string]int, len(s))
	for i, v := range s {
		m[v] = i
	}
	return m
}

func removeEmptyStrings(in []string, size int) []string {
	out := make([]string, 0, size)
	for _, v := range in {
		if v != "" {
			out = append(out, v)
		}
	}
	return out
}

// order key in special nagios order
func orderedKeys(kv map[string]interface{}) []string {
	first_keys := make([]string, len(keyOrder))
	keys := make([]string, 0, len(kv))

	for key := range kv {
		if index, found := keyOrder[key]; found {
			first_keys[index] = key
		} else {
			keys = append(keys, key)
		}
	}
	sort.Strings(keys)
	return append(removeEmptyStrings(first_keys, len(kv)), keys...)
}

func generate(b *bytes.Buffer, dt time.Time, resources []puppetquery.Resource) error {
	fmt.Fprintln(b, "# HEADER: This file was autogenerated at", dt.Format(time.RubyDate))
	b.WriteString("# HEADER: by puppet.  While it can still be managed manually, it\n")
	b.WriteString("# HEADER: is definitely not recommended.\n")

	for i, r := range resources {
		if i != 0 {
			b.WriteByte('\n')
		}
		fmt.Fprintln(b, "define", strings.TrimPrefix(r.Type, nagiosPrefix), "{")
		fmt.Fprintf(b, "\t## --PUPPET_NAME-- (called '_naginator_name' in the manifest)                %s\n", r.Title)
		for _, k := range orderedKeys(r.Parameters) {
			if _, found := badparams[k]; found {
				continue
			}
			v := r.Parameters[k]
			fmt.Fprintf(b, "\t%-30s %v\n", k, v)
		}
		b.WriteString("}\n")
	}

	return nil
}
