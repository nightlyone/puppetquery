package main

import (
	"bytes"
	"testing"
	"time"

	"github.com/nightlyone/puppetquery"
)

func TestNameVars(t *testing.T) {
	got := len(slice2map(nagiosTypes))
	want := len(nameVars)
	if got != want {
		t.Errorf("length mismatch: got len(%d) != len(%d), want len(nagiosTypes) == len(nameVars)",
			len(nagiosTypes), len(nameVars),
		)
	}
}

var puppetdbServices = []puppetquery.Resource{
	puppetquery.Resource{
		Certname:   "www43.jimdo-server.com",
		Type:       "Nagios_service",
		Title:      "puppet-run on www43.jimdo-server.com",
		Exported:   true,
		Tags:       []string{},
		Sourcefile: "/var/lib/puppet/environments/production/modules/periodicnoise/manifests/monitored_cron.pp",
		Sourceline: 90,
		Parameters: map[string]interface{}{
			"freshness_threshold": 4200,
			"host_name":           "www43.jimdo-server.com",
			"service_description": "puppet-run",
			"use": "puppet-client-service-nopager",
		},
	},
	puppetquery.Resource{
		Certname: "www41.jimdo-server.com",
		Type:     "Nagios_service",
		Title:    "website_creation_dead_letter_notify on www41.vpn.jimdo-server.com",
		Exported: true,
		Tags: []string{
			"node",
			"website_creation_dead_letter_notify",
			"role::jimdo::cms",
			"cms-server",
			"monitoring",
			"cms",
			"profile",
			"profile::jimdo::monitoring::job_queue_website_creation",
			"nagios_service",
			"job_queue_website_creation",
			"periodicnoise::monitored_cron",
			"www41",
			"monitored_cron",
			"role",
			"class",
			"job_queue_check",
			"jimdo",
			"periodicnoise",
		},
		Sourcefile: "/var/lib/puppet/environments/production/modules/periodicnoise/manifests/monitored_cron.pp",
		Sourceline: 90,
		Parameters: map[string]interface{}{
			"freshness_threshold": 720,
			"host_name":           "www41.vpn.jimdo-server.com",
			"notes_url":           "https://github.com/Jimdo/admin-documentation/blob/master/nagios/job_queue_website_creation.md",
			"service_description": "website_creation_dead_letter_notify",
			"use": "check-thrice-passive-service-nopager",
		},
	},
}

var nagiosServices = `# HEADER: This file was autogenerated at Fri Nov 21 19:29:46 +0100 2014
# HEADER: by puppet.  While it can still be managed manually, it
# HEADER: is definitely not recommended.
define service {
	## --PUPPET_NAME-- (called '_naginator_name' in the manifest)                puppet-run on www43.jimdo-server.com
	host_name                      www43.jimdo-server.com
	use                            puppet-client-service-nopager
	service_description            puppet-run
	freshness_threshold            4200
}

define service {
	## --PUPPET_NAME-- (called '_naginator_name' in the manifest)                website_creation_dead_letter_notify on www41.vpn.jimdo-server.com
	host_name                      www41.vpn.jimdo-server.com
	use                            check-thrice-passive-service-nopager
	service_description            website_creation_dead_letter_notify
	freshness_threshold            720
	notes_url                      https://github.com/Jimdo/admin-documentation/blob/master/nagios/job_queue_website_creation.md
}
`

func TestServiceNagination(t *testing.T) {
	dt, err := time.Parse(time.RubyDate, "Fri Nov 21 19:29:46 +0100 2014")
	if err != nil {
		t.Fatal(err)
	}
	b := new(bytes.Buffer)
	err = generate(b, dt, puppetdbServices)
	if err != nil {
		t.Fatal(err)
	}
	got := b.String()
	want := nagiosServices
	if got != want {
		t.Errorf("got |%s|, want |%s|", got, want)
	}
}

func BenchmarkServiceNagination(b *testing.B) {
	dt := time.Now()
	buf := new(bytes.Buffer)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		buf.Reset()
		err := generate(buf, dt, puppetdbServices)
		if err != nil {
			b.Fatal(err)
		}
		b.SetBytes(int64(buf.Len()))
	}

}

var puppetdbHosts = []puppetquery.Resource{
	puppetquery.Resource{
		Certname:   "ip-10-5-146-100.eu-west-1.aws.jimdo-server.com",
		Type:       "Nagios_host",
		Title:      "www66-slave1.prod.eu-west-1.aws.jimdo-server.com",
		Exported:   true,
		Sourcefile: "/var/lib/puppet/environments/production/manifests/nodeless.pp",
		Sourceline: 79,
		Parameters: map[string]interface{}{
			"alias":      "ip-10-5-146-100.eu-west-1.aws.jimdo-server.com",
			"hostgroups": "aws",
			"parents":    "vpc_tunnel.prod.aws.jimdo-server.com",
			"use":        "generic-host-nopager",
		},
	},
}

var nagiosHosts = `# HEADER: This file was autogenerated at Fri Nov 21 19:29:46 +0100 2014
# HEADER: by puppet.  While it can still be managed manually, it
# HEADER: is definitely not recommended.
define host {
	host_name                      www66-slave1.prod.eu-west-1.aws.jimdo-server.com
	alias                          ip-10-5-146-100.eu-west-1.aws.jimdo-server.com
	use                            generic-host-nopager
	parents                        vpc_tunnel.prod.aws.jimdo-server.com
	hostgroups                     aws
}
`

func TestHostNagination(t *testing.T) {
	dt, err := time.Parse(time.RubyDate, "Fri Nov 21 19:29:46 +0100 2014")
	if err != nil {
		t.Fatal(err)
	}
	b := new(bytes.Buffer)
	err = generate(b, dt, puppetdbHosts)
	if err != nil {
		t.Fatal(err)
	}
	got := b.String()
	want := nagiosHosts
	if got != want {
		t.Errorf("got |%s|, want |%s|", got, want)
	}
}

func BenchmarkHostNagination(b *testing.B) {
	dt := time.Now()
	buf := new(bytes.Buffer)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		buf.Reset()
		err := generate(buf, dt, puppetdbHosts)
		if err != nil {
			b.Fatal(err)
		}
		b.SetBytes(int64(buf.Len()))
	}

}

var puppetdbCommands = []puppetquery.Resource{
	puppetquery.Resource{
		Certname:   "web70.jimdo-server.com",
		Type:       "Nagios_command",
		Title:      "check_nic_by_nrpe",
		Exported:   true,
		Sourcefile: "/var/lib/puppet/environments/production/site/profile/manifests/jimdo/monitoring/nic.pp",
		Sourceline: 5,
		Parameters: map[string]interface{}{
			"command_line": "$USER1$/check_nrpe -t 60 -H $HOSTNAME$ -c check_nic",
		},
	},
	puppetquery.Resource{
		Certname:   "web72.jimdo-server.com",
		Type:       "Nagios_command",
		Title:      "check_nic_by_nrpe",
		Exported:   true,
		Sourcefile: "/var/lib/puppet/environments/production/site/profile/manifests/jimdo/monitoring/nic.pp",
		Sourceline: 5,
		Parameters: map[string]interface{}{
			"command_line": "$USER1$/check_nrpe -t 60 -H $HOSTNAME$ -c check_nic",
		},
	},
	puppetquery.Resource{
		Certname:   "ip-10-5-24-119.eu-west-1.aws.jimdo-server.com",
		Type:       "Nagios_command",
		Title:      "check_beanstalkd_by_nrpe",
		Exported:   true,
		Sourcefile: "/var/lib/puppet/environments/production/site/profile/manifests/jimdo/beanstalkd.pp",
		Sourceline: 28,
		Parameters: map[string]interface{}{
			"command_line": "$USER1$/check_nrpe -t 60 -H $HOSTNAME$ -c check_beanstalkd",
		},
	},
	puppetquery.Resource{
		Certname:   "ip-10-5-25-26.eu-west-1.aws.jimdo-server.com",
		Type:       "Nagios_command",
		Title:      "check_beanstalkd_by_nrpe",
		Exported:   true,
		Sourcefile: "/var/lib/puppet/environments/production/site/profile/manifests/jimdo/beanstalkd.pp",
		Sourceline: 28,
		Parameters: map[string]interface{}{
			"command_line": "$USER1$/check_nrpe -t 60 -H $HOSTNAME$ -c check_beanstalkd",
		},
	},
	puppetquery.Resource{
		Certname:   "ovpn02-eu.vpn.jimdo-server.com",
		Type:       "Nagios_command",
		Title:      "check_raid",
		Exported:   true,
		Sourcefile: "/var/lib/puppet/environments/production/modules/raid/manifests/nagios.pp",
		Sourceline: 13,
		Parameters: map[string]interface{}{
			"command_line": "/usr/sbin/check-raid --nagios",
		},
	},
}

var nagiosCommands = `# HEADER: This file was autogenerated at Fri Nov 21 19:29:46 +0100 2014
# HEADER: by puppet.  While it can still be managed manually, it
# HEADER: is definitely not recommended.
define command {
	command_name                   check_nic_by_nrpe
	command_line                   $USER1$/check_nrpe -t 60 -H $HOSTNAME$ -c check_nic
}

define command {
	command_name                   check_beanstalkd_by_nrpe
	command_line                   $USER1$/check_nrpe -t 60 -H $HOSTNAME$ -c check_beanstalkd
}

define command {
	command_name                   check_raid
	command_line                   /usr/sbin/check-raid --nagios
}
`

func TestCommandNagination(t *testing.T) {
	dt, err := time.Parse(time.RubyDate, "Fri Nov 21 19:29:46 +0100 2014")
	if err != nil {
		t.Fatal(err)
	}
	b := new(bytes.Buffer)
	err = generate(b, dt, puppetdbCommands)
	if err != nil {
		t.Fatal(err)
	}
	got := b.String()
	want := nagiosCommands
	if got != want {
		t.Errorf("got |%s|, want |%s|", got, want)
	}
}

func BenchmarkCommandNagination(b *testing.B) {
	dt := time.Now()
	buf := new(bytes.Buffer)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		buf.Reset()
		err := generate(buf, dt, puppetdbCommands)
		if err != nil {
			b.Fatal(err)
		}
		b.SetBytes(int64(buf.Len()))
	}

}
